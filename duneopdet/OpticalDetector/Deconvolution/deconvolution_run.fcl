#include "services_dune.fcl"
#include "Deconvolution.fcl"
#include "DecoAnalysis.fcl"



process_name: DecReco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "deconv_hist.root" }
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_info
                @table::dunefd_simulation_services
}

# DUNE FD 1x2x6 workspace geometry
services.Geometry: @local::dune10kt_1x2x6_v4_geo

#source is now a root file
source:
{
module_type: RootInput
maxEvents:  -1        # Number of events to create
#specify from command line with -s or --source
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
   
   producers:
   {
      opdec: @local::dune_deconvolution
      rns:   { module_type: "RandomNumberSaver" }
   }

   analyzers:
   {
      opdecoana:  @local::dune_deco_analysis
   }
   
   
   #define the producer and filter modules for this path, order matters, 
   #filters reject all following items.  see lines starting physics.producers below
   simulate: [ opdec, rns ] 
   analyzeIt:  [ opdecoana ]
   
   #define the output stream, there could be more than one if using filters 
   stream1:  [ out1 ]
   
   #trigger_paths is a keyword and contains the paths that modify the art::event, ie filters and producers
   trigger_paths: [simulate]
   
   #end_paths is a keyword and contains the paths that do not modify the art::Event, 
   #ie analyzers and output streams.  these all run simultaneously
   end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
   out1:
   {
      module_type: RootOutput
      fileName:    "deconv_gen.root"
      #default file name, can override from command line with -o or --output
   }
}
