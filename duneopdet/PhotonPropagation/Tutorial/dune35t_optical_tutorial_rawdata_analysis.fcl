#include "services_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "opticaldetectorservices_dune.fcl"


process_name: OpDigiAnalysis

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "opdigiana_hist.root" }
  TimeTracker:       {}
                @table::dune35t_services
  message:      @local::standard_info 
}

services.OpDigiProperties:        @local::dune35t_opdigiproperties

source:
{
  module_type: RootInput
  maxEvents : 1000
}


physics:
{

 analyzers:
 {
   opdigiana:   @local::dune35t_opdigiana
   #ophitana:    @local::dunefd_ophitana
}
 analyzeIt: [opdigiana] #,  ophitana]

 #define the output stream, there could be more than one if using filters 
 #stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt]  
}

physics.analyzers.opdigiana.InputModule: ssptooffline
physics.analyzers.opdigiana.InstanceName: offlinePhoton
