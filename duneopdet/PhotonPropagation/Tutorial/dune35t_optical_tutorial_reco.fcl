#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "mccheatermodules.fcl"
#include "photpropservices_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "opticaldetectorservices_dune.fcl"


process_name: OpticalReconstruction

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "dune35t_optical_tutorial_reco_hist.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::dune35t_simulation_services
  message:      @local::standard_info
}

# DUNE 35ton w/o wires and mesh
services.user.OpDigiProperties:        @local::dune35t_opdigiproperties


#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
  #specify from command line with -s or --source
   
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
   
   producers:
   {
      # photon detector reconstruction
      ophit:     @local::dune35t_ophit
      opflash:   @local::dune35t_opflash
      rns:       { module_type: "RandomNumberSaver" }
   }

   analyzers:
   {
      opflashana:  @local::dune35t_opflashana
   }
   
   
   #define the producer and filter modules for this path, order matters, 
   #filters reject all following items.  see lines starting physics.producers below
   simulate: [ ophit, opflash, rns ] 
   analyzeIt:  [ opflashana ]
   
   #define the output stream, there could be more than one if using filters 
   stream1:  [ out1 ]
   
   #trigger_paths is a keyword and contains the paths that modify the art::event, 
   #ie filters and producers
   trigger_paths: [simulate] 
   
   #end_paths is a keyword and contains the paths that do not modify the art::Event, 
   #ie analyzers and output streams.  these all run simultaneously
   end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
   out1:
   {
      module_type: RootOutput
      fileName:    "dune35t_optical_tutorial_reco_gen.root"
      #default file name, can override from command line with -o or --output
   }
}
