#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "mccheatermodules.fcl"
#include "photpropservices_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "opticaldetectorservices_dune.fcl"
#include "FlashMatchAna.fcl"


process_name: OpticalResim

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "protodune_optical_tutorial_resimulate_hist.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_info
  @table::protodune_simulation_services
}



########################################
# Set a new photon detector efficiency #
########################################

services.OpDetResponseInterface.QuantumEfficiency: 0.00574  # This is 2x the nominal


source:
{
  module_type: RootInput
  maxEvents:  -1        # Run over all events
  #specify from command line with -s or --source
   
}


physics:
{

   # Run both detector simulation and reconstruction
   producers:
   {
      opdigi:    @local::dunefd_opdigi_threegang    # simple digitizer with no noise and high saturation
      ophit:     @local::dunefd_ophit
      opflash:   @local::dunefd_opflash
      rns:       { module_type: "RandomNumberSaver" }
   }

   # Run both analyzers we've looked at
   analyzers:
   {
      opflashana:  @local::dunefd_opflashana
      flashmatch:  @local::marley_flashmatchana
   }
   
   simulate: [ opdigi, ophit, opflash, rns ] 
   analyzeIt:  [ opflashana, flashmatch ]
   stream1:  [ out1 ]
   
   trigger_paths: [simulate] 
   end_paths:     [analyzeIt, stream1]  
}

outputs:
{
   out1:
   {
      module_type: RootOutput
      fileName:    "protodune_optical_tutorial_resimulate_gen.root"
      #default file name, can override from command line with -o or --output
   }
}
