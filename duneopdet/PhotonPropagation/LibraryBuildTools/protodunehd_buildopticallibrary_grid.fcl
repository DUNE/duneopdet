# New fhicl file for library generation. It was based on the
# photonlibrary_builder_icarus.fcl by Gianluca Petrillo
#
# This configuration is base for the full simulation of voxels of the
# photon visibility lookup table ("photon library") for ProtoDUNE-HD.
# 

#include "services_dune.fcl"
#include "backtrackerservice.fcl"
#include "particleinventoryservice.fcl"
#include "singles.fcl"
#include "largeantmodules.fcl"
#include "detsimmodules.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "opticaldetectorservices_dune.fcl"
#include "photolibbuild_services_dune.fcl"
#include "photpropservices_dune.fcl"
#include "lightsource.fcl"

# services
#include "services_refactored_pdune.fcl"

# modules
#include "opticaldetectormodules.fcl"
#include "opticaldetectorservices.fcl"
#include "LArG4_dune.fcl"


process_name: LibraryBuild


services:
{
  @table::protodune_larg4_services
  
  @table::dunefd_photolibbuild_services 
  # events are generated anew each time: default per-event policy is ineffective
  #NuRandomService:    @local::random_NuRandomService
  RandomNumberGenerator: {} #ART native random number generator
  
  OpDetResponse:      @local::standard_opdetresponse
  
  SpaceChargeService: @erase
AuxDetGeometry: @local::protodunehdv1_auxdet_geo
  Geometry:		@local::protodunehdv1_geo
  
}


#Use the following lines if you need to change the geometry by hand (e.g. test geometry)
#services.Geometry.GDML: "dunevdcb1_v2_refactored.gdml"

#services.OpDetResponseInterface.LongAxis: z

services.TFileService.fileName: "Photonlibrary_protodunehd.root"

services.Geometry.DisableWiresInG4: false # we need to account for wire shadow

services.LArG4Parameters: { # customization
  
  @table::services.LArG4Parameters
  
  # enable this custom LArG4 physics list
  # with optical physics instead of fast scintillation
  UseCustomPhysics: true
  EnabledPhysics: [
    "Em",
    "Optical",            # <== this is the important one!
    "SynchrotronAndGN",
    "Ion",
    "Hadron",
    "Decay",
    "HadronElastic",
    "Stopping",
    "NeutronTrackingCut"
    ]
  
  # store only the count of photons per channel, not the single photons
  UseLitePhotons: true 
  
  # avoid unnecessary steps
  DisableWireplanes: true
  FillSimEnergyDeposits: false
  NoElectronPropagation: false
  
} # services.LArG4Parameters


services.PhotonVisibilityService: {
  LibraryBuildJob:  true
  DoNotLoadLibrary: true
  
  UseCryoBoundary:  true
  
  NX:  100  # 100 voxels along X direction
  NY:  100  # 100 voxels along Y direction
  NZ:  100  # 100 voxels along Z direction

} # services.PhotonVisibilityService

# for photon library generation we do not include prescale
services.LArPropertiesService.ScintPreScale: 1.0


################################################################################
###  workflow configuration
################################################################################

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   2           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_lightsource	  
   largeant:  @local::standard_largeant	  
 }

 analyzers:
 {
   pmtresponse: @local::dunefd_simphotoncounter    # defined in opticaldetectormodules.fcl
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant ] 
 analyzeIt:  [ pmtresponse ]
 #define the output stream, there could be more than one if using filters  stream1:  [ ]
 stream1:  [ ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "notused.root" #default file name, can override from command line with -o or --output
 }
}


##### Parameter changes for the generator (lightsource) #####

# do not allow lightsource to write output into root file
physics.producers.generator.FillTree: false

##### Parameter changes for the pmt response analyzer (simphotoncounter) #####

physics.analyzers.pmtresponse.MakeAllPhotonsTree: false
physics.analyzers.pmtresponse.MakeDetectedPhotonsTree: false
physics.analyzers.pmtresponse.MakeOpDetsTree: false
physics.analyzers.pmtresponse.MakeOpDetEventsTree: false

#How many photons to generate per voxel
physics.producers.generator.N: 100000

# To disable wireplane absorption, uncomment this line
#services.LArG4Parameters.OpticalParamModels: ["TransparentPlaneAction"]
