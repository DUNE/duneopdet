#include "services_dune.fcl"
#include "singles.fcl"
#include "largeantmodules.fcl"
#include "detsimmodules.fcl"
#include "opticaldetectormodules.fcl"
#include "photpropservices_dune.fcl"
#include "photpropmodules_dune.fcl"
#include "lightsource.fcl"


process_name: LibraryTest





services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "libanalysis_test_hists.root" }
  TimeTracker:       {}
  message:       @local::standard_info
  PhotonVisibilityService: @local::protodune_photonvisibilityservice
  @table::dunefd_simulation_services  # defined in services.fcl
}

physics:
{

 producers:
 {
 }

 analyzers:
 {
   libana: @local::dunefd_photonlibraryanalyzer
 }

 analyzeIt:  [ libana ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt]  
}


services.Geometry.GDML: "protoDune_v1.gdml"
services.Geometry.ROOT: "protoDune_v1.gdml"
services.Geometry.SortingParameters.DetectorVersion: "dune10kt_v1"



# Begin optical specific parts:

#
# Examine your own library file - need to customize the visibility service
#

services.PhotonVisibilityService.LibraryFile: "PhotonLibraryFile_protoDune_test.root"

# Number of voxels
services.PhotonVisibilityService.NX: 5
services.PhotonVisibilityService.NY: 5
services.PhotonVisibilityService.NZ: 5

services.PhotonVisibilityService.UseCryoBoundary: false

# IF UseCryoBoundary is set to false, so use the following parameters in cm
#services.PhotonVisibilityService.XMin:  -8.
#services.PhotonVisibilityService.XMax:  -6.
#services.PhotonVisibilityService.YMin:  -100.
#services.PhotonVisibilityService.YMax:  0
#services.PhotonVisibilityService.ZMin:  60.
#services.PhotonVisibilityService.ZMax:  90.

